---
title: "importando_dados"
format: html
editor: visual
---

# Importando Dados no R

O R já vem com diversos conjuntos de dados internos que são muito úteis para prática, aprendizado e demonstração de técnicas estatísticas. Esses datasets incorporados permitem que o usuário teste funções e realize análises sem precisar buscar ou importar arquivos externos.

Um exemplo clássico é o conjunto de dados **Orange**, que acompanha o crescimento de árvores de laranja ao longo do tempo. Esse dataset faz parte dos pacotes base do R, ou seja, já está disponível assim que o R é instalado.

Para utilizá-lo, basta chamar o nome do conjunto de dados diretamente no R, sem a necessidade de importação externa. Assim, você pode explorar as informações e aplicar suas análises normalmente.

```{r}
data("Orange")
```

O conjunto de dados **Orange** está sendo copiado para um novo objeto chamado **dados**. O operador `<-` significa "atribua o conteúdo de Orange ao objeto dados". Assim, você pode trabalhar com os dados usando esse novo nome.

```{r}
dados <- Orange
dados
```

Para salvar o conjunto de dados **Orange** em uma planilha Excel (.xlsx) no R, você pode utilizar o pacote **writexl**, que permite exportar data frames para arquivos Excel de forma prática e rápida.

```{r}
library(writexl)

write_xlsx(Orange, path = "Orange.xlsx")
```

## Dados em Formato Excel

O pacote **readxl** é utilizado para importar planilhas do Excel para o R, convertendo-as em data frames que podem ser manipulados facilmente. Para usar suas funções, é necessário carregar o pacote antes.

A função principal para essa tarefa é a **read_excel**, que lê o conteúdo da planilha.

O primeiro argumento dessa função é o caminho do arquivo Excel que será importado. Esse caminho, incluindo o nome do arquivo e a extensão `.xlsx`, deve ser informado entre aspas duplas para que o R o reconheça corretamente.

```{r}
library(dplyr)
library(tidyverse)
library(readxl)
dados2 <- read_excel("dados.xlsx",
          sheet = "sensibilidade_fungicidas")

#O argumento sheet = "sensibilidade_fungicidas" indica que você está lendo especificamente a aba (planilha) com esse nome dentro do arquivo Excel.

#Ou dessa forma:

#Pelo nome da aba → "nome_da_aba".
dados2<- read_excel("dados.xlsx", "sensibilidade_fungicidas")
#Pela posição da aba → 1, 2, 3, etc.
dados2 <- read_excel("dados.xlsx", 2)


dados2 <- dados2 |>

mutate(dose = as.numeric(dose)) #O código transforma a coluna dose do objeto dados2 em formato numérico e salva essa versão modificada de volta no próprio dados2.

#Isso porque na tabela a coluna dose não está como número.

```

## Dados em Planilhas Google

Para importar dados de planilhas do Google Sheets no R, utiliza-se a função **read_gsheet**, que faz parte do pacote **gsheet**. Essa função lê a planilha diretamente a partir da URL (link) da planilha desejada, facilitando a importação sem precisar baixar o arquivo.

```{r}
library(gsheet)

survey <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738")
```

## Usando o Argumento `text`

Uma maneira rápida de carregar dados no R é utilizando o argumento **text**. Basta copiar os dados diretamente de uma planilha (Ctrl + C) e colar dentro das aspas (`""`) após o argumento `text` na função `read.table`. Isso permite importar pequenos conjuntos de dados sem precisar salvar arquivos externos.

Por exemplo:\
`dados <- read.table(h = TRUE, text = " ")`

### Salvando Dados do R para Arquivos Excel ou CSV

Para exportar dados do R, você pode salvar data frames em arquivos Excel ou CSV usando pacotes específicos, como `writexl` para Excel e funções base do R para CSV.

```{r}
library(writexl)
# write_xlsx() #Excel
# write_csv() #Csv
```

## Verificando o Conjunto de Dados

Para confirmar se os dados foram importados corretamente, podemos usar as funções **str()** e **glimpse()**.

-    A função **str()** apresenta um resumo rápido da estrutura do objeto, mostrando o tipo, tamanho e os componentes, sendo útil para uma primeira exploração de data frames, listas ou vetores.

-    A função **glimpse()**, do pacote **dplyr**, oferece uma visão compacta e organizada do conjunto de dados, exibindo o número de linhas e colunas, o tipo de cada variável (como numérico ou caractere) e os primeiros valores de cada coluna.

Ambas ajudam a entender rapidamente o formato e o conteúdo dos dados carregados.

```{r}
str(dados2) 
glimpse (dados2)
```

### Resumo Estatístico Detalhado com a Função `skim()`

A função **skim()**, do pacote **skimr**, oferece um resumo estatístico mais completo dos dados. Ela apresenta informações como média, mediana, valores mínimos e máximos, além do número de valores ausentes (NA) em cada variável. Essa função é muito útil para uma análise exploratória inicial mais aprofundada.

```{r}
library(skimr) #warning:false #message:false
skim(dados2)
```

### Visualizando os Nomes das Colunas

A função **names()** é utilizada para listar os nomes das colunas de um data frame. Isso ajuda a identificar claramente quais variáveis estão disponíveis para análise no conjunto de dados.

```{r}
names(dados2)
```

## Trabalhando com Dados Importados

Após importar os dados, é comum realizar algumas operações básicas para explorá-los e manipulá-los. A seguir, veja alguns exemplos simples que ilustram como começar a trabalhar com o seu conjunto de dados.

```{r}
library(gsheet)
survey <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738")

survey |>
  group_by(state,residue) |>   # agrupar dentro dessa planilha
  count()

RS <- survey |>  # Para criar uma planilha de um subconjunto
  filter(state == 'RS') # Filter é para selecionar linhas
PR <- survey |>
  filter(state == 'PR')


combinado <- rbind(RS,PR) # Combinar os dois conjuntos, um embaixo do outro

```

```{r}
survey_b <- survey |>
 dplyr::select(year, state, species) # Para selecionar colunas de um arquivo. Usar os dois pontos para chamar o pacote dplyr sem carrega-lo.

survey_b |>
  group_by(year,species) |> 
  count() |>
  ggplot(aes(year, n, fill = species))+ # fill é o preenchimento
  geom_col()+
  scale_fill_manual(values = c("red", "blue")) #fazer escolha de cor manual
ggsave("espécies.png") #para salvar a imagem

survey_b |>
  group_by(year,species) |> 
  count() |>
  ggplot(aes(year, n, fill = species))+ #fill é o preenchimento, se colocar color depois do fill vai adicionar cor no controno das barras dos gráficos
  geom_col()+
  scale_fill_viridis_d()
```

![](espécies.png)
