---
title: "graficos"
---

# **Visualização de dados**

## Visualização de Dados com ggplot2

O pacote **ggplot2** é amplamente utilizado para criar gráficos no R. Ele pode ser carregado sozinho, com `library(ggplot2)`, ou como parte do conjunto **tidyverse**.

A construção dos gráficos no **ggplot2** é feita por camadas, que vão sendo adicionadas progressivamente. Por isso, utiliza-se o símbolo **+**, que representa a adição de uma nova camada ao gráfico.

A estrutura básica inicia-se com a função **ggplot()**, onde se define a estética dos dados — ou seja, quais variáveis serão usadas nos eixos, cores, tamanhos, etc. Depois, adicionam-se camadas com funções do tipo **geom\_()**, que determinam o tipo do gráfico, como:

-    `geom_point()` para gráficos de pontos,

-    `geom_line()` para gráficos de linha,

-    `geom_bar()` para gráficos de barras, entre outros.

### Uso do Pipe (\|\>)

O pipe (`|>`) é utilizado para encadear comandos de forma mais legível e organizada. Ele permite aplicar uma sequência de operações sem precisar repetir o nome do objeto várias vezes. Deve ser precedido por um espaço e, geralmente, seguido por uma nova linha para melhor clareza.

### Exemplo Básico de Gráfico com ggplot2

Antes de criar um gráfico, é comum importar os dados para o R. Depois, pode-se usar o pipe para passar o conjunto de dados para a função `ggplot()` e construir o gráfico adicionando camadas conforme necessário.

```{r}
library(gsheet)

# usou conjunto de dados do Magnésio, planilha online. Usou o gsheet para chamar os dados do link.
dat_mg <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137")
```

### Construindo um Gráfico com ggplot2

A criação de um gráfico no **ggplot2** começa pela função **ggplot()**, onde se define o conjunto de dados que será utilizado — geralmente um data frame, como por exemplo, um objeto chamado *magnésio*.

Dentro da função **ggplot()**, usamos a função **aes()** (estética) para mapear as variáveis aos eixos do gráfico, indicando qual variável vai para o eixo x e qual vai para o eixo y. Além disso, podemos definir características visuais, como cor, tamanho e forma dos pontos.

Para colorir elementos do gráfico, utiliza-se o argumento `color`, que pode receber o nome de uma cor ou um código hexadecimal. Quando o argumento `color` é colocado dentro de **aes()**, isso indica que a cor será atribuída de forma dinâmica, de acordo com os valores de uma variável do conjunto de dados.

### Exemplo: Gráfico de Pontos (Dispersão)

A função **geom_point()** especifica que o gráfico será de pontos, ideal para visualizar a relação entre duas variáveis em um gráfico de dispersão.

Além disso, é possível ajustar a transparência dos pontos usando o argumento **alpha**, que varia de 0 (totalmente transparente) a 1 (totalmente opaco), facilitando a visualização em gráficos com muitos pontos sobrepostos.

```{r}
library(ggplot2)

dat_mg |> 
  ggplot (aes(trat, comp, color = trat))+
  geom_point(alpha = 1)
```

### Usando a Função `shape` no ggplot2

A função **shape** permite modificar a forma dos pontos em um gráfico, atribuindo diferentes símbolos (como círculos, triângulos, quadrados, etc.) para distinguir categorias ou variáveis. Isso ajuda a visualizar melhor as diferenças entre grupos no gráfico.

```{r}
dat_mg |>
  ggplot(aes(trat, comp, shape = trat, color = trat))+
  geom_point(alpha = 1)
```

### Gráficos de Pontos com `geom_jitter`

Em gráficos com muitos dados agrupados, é comum que os pontos se sobreponham, dificultando a visualização individual de cada observação. Para solucionar isso, o **ggplot2** oferece a função **geom_jitter()**.

Essa função adiciona um pequeno deslocamento aleatório aos pontos, espalhando-os ligeiramente para evitar sobreposição. O deslocamento pode ser controlado pelo argumento **width**, que ajusta a largura da dispersão horizontal, garantindo que os pontos fiquem próximos dos valores originais, mas visíveis separadamente.

```{r}
dat_mg |>
  ggplot(aes(trat, comp, shape = trat, color = trat))+
  geom_point(alpha = 1)+
  geom_jitter(width = 0.2)
```

### Gráfico de Barras com ggplot2 e dplyr

Neste exemplo, usamos os pacotes **ggplot2** e **dplyr** para criar um gráfico de barras que mostra a média da variável **comp** para cada grupo da variável **trat** no conjunto de dados **dat_mg**.

Primeiro, os dados são agrupados pela variável **trat** com a função **group_by()** e, em seguida, calcula-se a média de **comp** usando **summarise()**, ignorando valores ausentes (`NA`) com o argumento `na.rm = TRUE`.

Com os dados resumidos, construímos o gráfico com a função **ggplot()**. A camada **geom_bar()**, configurada com `stat = "identity"`, indica que os valores do eixo y já foram calculados previamente e não precisam ser contados ou somados automaticamente.

O preenchimento das barras é feito com `fill = trat`, e as bordas são destacadas com cor preta.

Os rótulos dos eixos são ajustados com **labs()**, e o tema **theme_minimal()** é aplicado para um visual mais limpo e moderno.

Esse gráfico é ideal para comparar médias entre diferentes grupos ou tratamentos, facilitando a interpretação visual dos resultados.

```{r}
library(ggplot2)
library(dplyr)

# Calcular média por tratamento
media_mg <- dat_mg |>
  group_by(trat) |>
  summarise(media_comp = mean(comp, na.rm = TRUE))

# Gráfico de barras
ggplot(media_mg, aes(x = trat, y = media_comp, fill = trat)) +
  geom_bar(stat = "identity", color = "black", width = 0.6) +
  labs(x = "Tratamento", y = "Média de Comprimento") +
  theme_minimal()

```

### Gráfico de Linhas

Neste exemplo, é criado um gráfico combinando **linhas e pontos** com base no conjunto de dados **media_mg**, que contém as médias por tratamento previamente calculadas.

O gráfico de linhas é útil para visualizar tendências ou variações entre os tratamentos. As linhas conectam os pontos representando as médias, facilitando a interpretação da progressão ou comparação entre os grupos.

```{r}
media_mg$trat <- factor(media_mg$trat, levels = unique(media_mg$trat))

# Criar gráfico de linhas com pontos
ggplot(media_mg, aes(x = trat, y = media_comp, group = 1)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(size = 3, shape = 21, fill = "white", color = "steelblue") +
  labs(x = "Tratamento", y = "Comprimento Médio") +
  theme_minimal()


```

### Personalizando o Gráfico com `labs()`

A função **labs()** permite adicionar elementos descritivos ao gráfico, como **título, subtítulo, nomes dos eixos, legenda** e **fonte dos dados**. Esses recursos tornam o gráfico mais informativo e facilitam sua interpretação, especialmente em contextos como relatórios, artigos científicos e apresentações.

O uso adequado do `labs()` enriquece a comunicação visual dos resultados, fornecendo contexto e clareza para quem analisa o gráfico.

```{r}
# Gráfico de barras com informações adicionais
ggplot(media_mg, aes(x = trat, y = media_comp, fill = trat)) +
  geom_bar(stat = "identity", color = "black", width = 0.6) +
  labs(
    title = "Média de Comprimento por Tratamento",
    subtitle = "Visualização comparativa das médias da variável 'comp'",
    x = "Tratamento",
    y = "Média de Comprimento",
    caption = "Fonte: Dados experimentais - dat_mg"
  ) +
  theme_minimal()
```

### Gráfico de Boxplot

O **boxplot** é um tipo de gráfico muito utilizado para analisar a **distribuição de uma variável numérica**, especialmente quando se deseja comparar essa distribuição entre diferentes grupos, como tratamentos experimentais.

Esse gráfico resume visualmente informações estatísticas importantes, como:

-    **Mediana** (linha central da caixa);

-    **Quartis** (limites inferior e superior da caixa);

-    **Extremos** (valores mínimos e máximos dentro de um intervalo aceitável);

-    **Outliers** (valores discrepantes), representados por pontos fora dos limites do boxplot.

No R, utilizamos a função **geom_boxplot()**, do pacote **ggplot2**, para gerar esse tipo de visualização.

A estrutura básica do gráfico exige uma variável **categórica no eixo x** (por exemplo, `trat`) e uma **variável numérica no eixo y** (como `comp`).

Esse tipo de gráfico é ideal para identificar assimetrias, dispersão e possíveis valores atípicos nos dados.

```{r}
library(ggplot2)

# Criar boxplot da variável 'comp' por tratamento
ggplot(dat_mg, aes(x = trat, y = comp, fill = trat)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 21, outlier.fill = "white") +
  labs(
    title = "Distribuição da Variável 'comp' por Tratamento",
    subtitle = "Boxplot representando a dispersão e tendência dos dados por grupo",
    x = "Tratamento",
    y = "Comprimento",
    caption = "Fonte: Dados experimentais - dat_mg"
  ) +
  theme_minimal()
```

### Composição de Gráficos com o Pacote **patchwork**

O pacote **patchwork** permite combinar múltiplos gráficos feitos com o **ggplot2** em uma única visualização, facilitando comparações e apresentando informações de forma integrada.

Após instalar e carregar o pacote, cada gráfico deve ser criado separadamente e atribuído a um **objeto com nome representativo**. Para isso, utiliza-se o operador **pipe (%\>%)** (ou o novo `|>`, se preferir), que permite dar sequência à construção do gráfico de forma clara e organizada.

Depois de criados, os gráficos podem ser combinados com o operador **+** (para empilhar na vertical) ou **\|** (para posicionar lado a lado), de acordo com a disposição desejada.

Essa ferramenta é especialmente útil em relatórios, painéis comparativos e apresentações visuais mais completas.

```{r}
library(ggplot2)
library(patchwork)

#Simulando um conjunto de dados 
set.seed(123)


# Simulando os dados
dados_fitopatologia <- data.frame(
  irrigacao = rep(c("Gotejamento", "Aspersão", "Sulco"), each = 30),
  umidade = rep(c("Alta", "Moderada"), times = 45),
  severidade = c(
    rnorm(30, mean = 0.6, sd = 0.1),  # Gotejamento
    rnorm(30, mean = 0.8, sd = 0.15), # Aspersão
    rnorm(30, mean = 0.4, sd = 0.1)   # Sulco
  )
)

# Gráfico 1: Boxplot
grafico1 <- dados_fitopatologia |>
  ggplot(aes(x = irrigacao, y = severidade, fill = irrigacao)) +
  geom_boxplot() +
  labs(
    title = "Severidade por tipo de irrigação",
    x = "Irrigação",
    y = "Severidade"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(size = 16, face = "bold", margin = margin(b = 10)),
    axis.title.x = element_text(margin = margin(t = 10)),
    axis.title.y = element_text(margin = margin(r = 10)),
    plot.margin = margin(t = 15, r = 15, b = 15, l = 15)
  )

# Gráfico 2: Jitter por umidade
grafico2 <- dados_fitopatologia |>
  ggplot(aes(x = irrigacao, y = severidade, color = umidade)) +
  geom_jitter(width = 0.2, size = 2) +
  labs(
    title = "Severidade por irrigação e umidade",
    x = "Irrigação",
    y = "Severidade"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(size = 16, face = "bold", margin = margin(b = 10)),
    axis.title.x = element_text(margin = margin(t = 10)),
    axis.title.y = element_text(margin = margin(r = 10)),
    plot.margin = margin(t = 15, r = 15, b = 15, l = 15)
  )

# Composição com patchwork
(grafico1 | grafico2) + 
  plot_annotation(
    title = "Análise Fitopatológica: Severidade do Oídio em Tomate",
    theme = theme(
      plot.title = element_text(size = 18, face = "bold", hjust = 0.5, margin = margin(b = 15))
    )
  )



```

### Gráficos com `facet_wrap()`

A função **facet_wrap()**, do pacote **ggplot2**, permite dividir um gráfico em **vários painéis** com base nos níveis de uma variável categórica. Cada painel mostra uma parte do conjunto de dados, facilitando a **comparação entre subgrupos**.

Essa abordagem é útil quando se deseja visualizar o comportamento de uma variável numérica em diferentes categorias, como tratamentos, regiões ou tempos.

```{r}
# Simulando os dados

set.seed(123)
dados_fitopatologia <- data.frame(
  irrigacao = rep(c("Gotejamento", "Aspersão", "Sulco"), each = 30),
  umidade = rep(c("Alta", "Moderada"), times = 45),
  severidade = c(
    rnorm(30, mean = 0.6, sd = 0.1),
    rnorm(30, mean = 0.8, sd = 0.15),
    rnorm(30, mean = 0.4, sd = 0.1)
  )
)

# Gráfico com facet_wrap por nível de umidade
grafico_facetado <- ggplot(dados_fitopatologia, aes(x = irrigacao, y = severidade, fill = irrigacao)) +
  geom_boxplot() +
  facet_wrap(~ umidade) +  # Dividindo os gráficos por nível de umidade
  labs(
    title = "Severidade da doença por tipo de irrigação e umidade",
    x = "Tipo de Irrigação",
    y = "Severidade"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5, margin = margin(b = 12)),
    strip.text = element_text(size = 14, face = "bold"),  # Título de cada painel (Alta / Moderada)
    axis.title.x = element_text(margin = margin(t = 10)),
    axis.title.y = element_text(margin = margin(r = 10))
  )

# Mostrar o gráfico
grafico_facetado
```
