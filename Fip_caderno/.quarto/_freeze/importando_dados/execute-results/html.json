{
  "hash": "78a15139c3641c2763ffd4fe7416fcf0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"importando_dados\"\nformat: html\neditor: visual\n---\n\n\n\n# Importando Dados\n\n## Importar um conjunto de dados que está disponível no R\n\nO R possui diversos conjuntos de dados incorporados que podem ser utilizados para fins de prática, ensino e demonstração de análises estatísticas.\n\nExemplo para o pacote `Orange`.\n\n`Orange` é um **dataset interno** do R que contém informações sobre o crescimento de árvores de laranja ao longo do tempo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Orange\")\n```\n:::\n\n\n\nAo conjunto de dados chamado `Orange` está atribuindo um novo objeto chamado `dados`. O operador `<-` está dizendo: \"pegue os dados de `Orange` e salve em um objeto chamado `dados`\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados <- Orange\ndados\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Tree  age circumference\n1     1  118            30\n2     1  484            58\n3     1  664            87\n4     1 1004           115\n5     1 1231           120\n6     1 1372           142\n7     1 1582           145\n8     2  118            33\n9     2  484            69\n10    2  664           111\n11    2 1004           156\n12    2 1231           172\n13    2 1372           203\n14    2 1582           203\n15    3  118            30\n16    3  484            51\n17    3  664            75\n18    3 1004           108\n19    3 1231           115\n20    3 1372           139\n21    3 1582           140\n22    4  118            32\n23    4  484            62\n24    4  664           112\n25    4 1004           167\n26    4 1231           179\n27    4 1372           209\n28    4 1582           214\n29    5  118            30\n30    5  484            49\n31    5  664            81\n32    5 1004           125\n33    5 1231           142\n34    5 1372           174\n35    5 1582           177\n```\n\n\n:::\n:::\n\n\n\nPara salvar o conjunto de dados `Orange` em formato de **planilha Excel (.xlsx)** no R, você pode usar o pacote `writexl.`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(writexl)\n\nwrite_xlsx(Orange, path = \"Orange.xlsx\")\n```\n:::\n\n\n\n## **Dados em formato Excel**\n\nO pacote `readxl` é usado para a importação de planilhas do excel, e permite gerar dataframe de planilhas excel, sendo necessário ser carregado sempre antes de usar. A maioria das funções do `readxl` permite ler dados de planilhas excel, a exemplo de `read_excel`.\n\nO primeiro argumento para `read_excel` é o caminho do arquivo que deve ser lido. O caminho do arquivo e o nome do arquivo (incluindo a extensão do arquivo, .xlsx) precisam ser colocados entre aspas duplas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(readxl)\ndados2 <- read_excel(\"dados.xlsx\",\n          sheet = \"sensibilidade_fungicidas\")\n\n#O argumento sheet = \"sensibilidade_fungicidas\" indica que você está lendo especificamente a aba (planilha) com esse nome dentro do arquivo Excel.\n\n#Ou dessa forma:\n\n#Pelo nome da aba → \"nome_da_aba\".\ndados2<- read_excel(\"dados.xlsx\", \"sensibilidade_fungicidas\")\n#Pela posição da aba → 1, 2, 3, etc.\ndados2 <- read_excel(\"dados.xlsx\", 2)\n\n\ndados2 <- dados2 |>\n\nmutate(dose = as.numeric(dose)) #O código transforma a coluna dose do objeto dados2 em formato numérico e salva essa versão modificada de volta no próprio dados2.\n\n#Isso porque na tabela a coluna dose não está como número.\n```\n:::\n\n\n\n## Dados em planilha google\n\nPara importar dados de planilhas google, usa-se a função `gsheet (read_sheet)`, presente no `pacote gsheet`. A função `read_gsheet` lê o arquivo a partir de uma URL (link da planilha desejada).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gsheet)\n\nsurvey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\n```\n:::\n\n\n\n## Usando o argumento text\n\nUma forma de carregar rapidamente dados no ambiente é por meio do argumento text. Você pode copiar (ctrl + c) os dados de uma planilha e colar (ctrl + v) entre aspas (\"\"), após o argumento text da função `read.table`.\n\nExemplo: dados \\<- read.table(h=T, text=\" \")\n\n## Para salvar do R para arquivo Excel ou csv\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(writexl)\n# write_xlsx() #Excel\n# write_csv() #Csv\n```\n:::\n\n\n\n## Para verificar o conjunto de dados\n\nPara verificar se os dados estão corretos, pode-se utilizar a função `str` ou `glimpse`.\n\nA função `str()` em R é usada para resumir a estrutura de um objeto. Ela mostra rapidamente o tipo, tamanho e os componentes de objetos como data frames, listas ou vetores. É muito útil na exploração inicial dos dados.\n\nA função glimpse mostra do pacote `dplyr`, permite uma visão geral compacta do conjunto de dados. Ela exibe:\n\n1.  O número de linhas e colunas;\n\n2.  O tipo de dado de cada variável (por exemplo, numérico, caracterer);\n\n3.  Os primeiros valores presentes em cada coluna;\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(dados2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [240 × 9] (S3: tbl_df/tbl/data.frame)\n $ code       : chr [1:240] \"FGT05\" \"FGT05\" \"FGT05\" \"FGT05\" ...\n $ year       : num [1:240] 2007 2007 2007 2007 2007 ...\n $ trial      : num [1:240] 1 1 1 1 1 1 1 1 1 1 ...\n $ state      : chr [1:240] \"RS\" \"RS\" \"RS\" \"RS\" ...\n $ dose       : num [1:240] 0 0 0.05 0.05 0.5 0.5 1 1 5 5 ...\n $ replicate  : num [1:240] 1 2 1 2 1 2 1 2 1 2 ...\n $ germination: num [1:240] 46 44 18 24 9 11 0 0 0 0 ...\n $ ...8       : logi [1:240] NA NA NA NA NA NA ...\n $ ...9       : logi [1:240] NA NA NA NA NA NA ...\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse (dados2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 240\nColumns: 9\n$ code        <chr> \"FGT05\", \"FGT05\", \"FGT05\", \"FGT05\", \"FGT05\", \"FGT05\", \"FGT…\n$ year        <dbl> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n$ trial       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ state       <chr> \"RS\", \"RS\", \"RS\", \"RS\", \"RS\", \"RS\", \"RS\", \"RS\", \"RS\", \"RS\"…\n$ dose        <dbl> 0.00, 0.00, 0.05, 0.05, 0.50, 0.50, 1.00, 1.00, 5.00, 5.00…\n$ replicate   <dbl> 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2…\n$ germination <dbl> 46, 44, 18, 24, 9, 11, 0, 0, 0, 0, 0, 0, 50, 50, 43, 44, 2…\n$ ...8        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ ...9        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n\nA função`skim()`, do pacote`skimr`fornece um resumo estatístico mais detalhado. Inclui média, mediana, mínimo, máximo, número de valores ausentes (NA).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr) #warning:false #message:false\nskim(dados2)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |       |\n|:------------------------|:------|\n|Name                     |dados2 |\n|Number of rows           |240    |\n|Number of columns        |9      |\n|_______________________  |       |\n|Column type frequency:   |       |\n|character                |2      |\n|logical                  |2      |\n|numeric                  |5      |\n|________________________ |       |\n|Group variables          |None   |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|code          |         0|             1|   3|   5|     0|       20|          0|\n|state         |         0|             1|   2|   2|     0|        2|          0|\n\n\n**Variable type: logical**\n\n|skim_variable | n_missing| complete_rate| mean|count |\n|:-------------|---------:|-------------:|----:|:-----|\n|...8          |       240|             0|  NaN|:     |\n|...9          |       240|             0|  NaN|:     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|    sd|   p0|     p25|     p50|  p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|-----:|----:|-------:|-------:|----:|----:|:-----|\n|year          |         0|             1| 2009.45|  2.02| 2007| 2007.75| 2009.50| 2011| 2012|▇▁▁▅▃ |\n|trial         |         0|             1|    1.00|  0.00|    1|    1.00|    1.00|    1|    1|▁▁▇▁▁ |\n|dose          |         0|             1|    2.76|  3.67|    0|    0.05|    0.75|    5|   10|▇▁▂▁▂ |\n|replicate     |         0|             1|    1.50|  0.50|    1|    1.00|    1.50|    2|    2|▇▁▁▁▇ |\n|germination   |         0|             1|   19.45| 19.21|    0|    0.00|   13.50|   40|   50|▇▂▁▂▅ |\n\n\n:::\n:::\n\n\n\nA função`names()`é empregada para listar os nomes reais das colunas do dataframe, permitindo identificar com clareza as variáveis disponíveis para análise.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(dados2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"code\"        \"year\"        \"trial\"       \"state\"       \"dose\"       \n[6] \"replicate\"   \"germination\" \"...8\"        \"...9\"       \n```\n\n\n:::\n:::\n\n\n\n## Trabalhando com os dados importados:\n\n**Exemplos:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gsheet)\nsurvey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\n\nsurvey |>\n  group_by(state,residue) |>   # agrupar dentro dessa planilha\n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n# Groups:   state, residue [3]\n  state residue     n\n  <chr> <chr>   <int>\n1 PR    <NA>      216\n2 RS    corn      169\n3 RS    soybean   281\n```\n\n\n:::\n\n```{.r .cell-code}\nRS <- survey |>  # Para criar uma planilha de um subconjunto\n  filter(state == 'RS') # Filter é para selecionar linhas\nPR <- survey |>\n  filter(state == 'PR')\n\n\ncombinado <- rbind(RS,PR) # Combinar os dois conjuntos, um embaixo do outro\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_b <- survey |>\n dplyr::select(year, state, species) # Para selecionar colunas de um arquivo. Usar os dois pontos para chamar o pacote dplyr sem carrega-lo.\n\nsurvey_b |>\n  group_by(year,species) |> \n  count() |>\n  ggplot(aes(year, n, fill = species))+ # fill é o preenchimento\n  geom_col()+\n  scale_fill_manual(values = c(\"red\", \"blue\")) #fazer escolha de cor manual\n```\n\n::: {.cell-output-display}\n![](importando_dados_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"espécies.png\") #para salvar a imagem\n\nsurvey_b |>\n  group_by(year,species) |> \n  count() |>\n  ggplot(aes(year, n, fill = species))+ #fill é o preenchimento, se colocar color depois do fill vai adicionar cor no controno das barras dos gráficos\n  geom_col()+\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](importando_dados_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n\n\n![](espécies.png)\n",
    "supporting": [
      "importando_dados_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}