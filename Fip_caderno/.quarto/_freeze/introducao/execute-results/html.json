{
  "hash": "69563680dc1ec5d6bd74b365e9e4e29b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introdução\"\nformat: html\neditor: visual\n---\n\n\n\n# **Introdução ao R - Análise de Dados**\n\n## **Introdução ao R e ao RStudio®**\n\nO **R** é uma linguagem de programação voltada para estatística, ciência de dados e análise gráfica. Gratuito e de código aberto, o R oferece uma ampla gama de recursos para manipulação, visualização e modelagem de dados, sendo amplamente utilizado por estatísticos, pesquisadores e cientistas de dados.\n\nO **RStudio** é um ambiente de desenvolvimento integrado (IDE) criado especificamente para facilitar o uso do R. Ele oferece uma interface gráfica organizada, com painéis dedicados ao código, visualização de resultados, gráficos e gerenciamento de arquivos, tornando o processo de análise de dados muito mais prático e eficiente. O RStudio é atualizado algumas vezes por ano e notifica automaticamente o usuário quando uma nova versão é lançada, eliminando a necessidade de verificação manual.\n\nNo RStudio, é possível:\n\n-   Escrever e testar scripts em R com organização e clareza;\n\n-   Criar gráficos detalhados e interativos;\n\n-   Desenvolver relatórios dinâmicos com R Markdown;\n\n-   Construir aplicações web com o pacote Shiny;\n\n-   Gerenciar pacotes, projetos e conjuntos de dados com facilidade.\n\nAo iniciar sua trajetória no universo da análise de dados com o RStudio, é fundamental compreender os primeiros passos e saber onde buscar orientação. Há uma variedade de materiais ricos em conteúdo e extremamente úteis disponíveis, e saber utilizá-los de forma estratégica pode fazer toda a diferença no aprendizado.\n\nEntre as principais referências, destaca-se o livro [*Introdução à Ciência de Dados com R*.](https://r4ds.hadley.nz/) Obras como essa são valiosas para quem deseja adquirir uma base sólida na ciência de dados e aprofundar-se nas técnicas de exploração e análise utilizando o R.\n\nCom esse entendimento inicial, damos início à nossa jornada no R, começando pelos seus elementos mais básicos, como instalar o R e o RStudio, objetos e funções que servirão de alicerce para análises mais avançadas no futuro.\n\n## **Baixar R Studio:**\n\n## Link para instalação do [R e do R Studio](https://posit.co/download/rstudio-desktop/).\n\n## **Objetos e funções:**\n\n**Objeto:** Em R, um objeto é uma estrutura que armazena um valor ou conjunto de informações. Para criá-lo, utiliza-se o operador de atribuição `<-`. Por exemplo: `a <- 1` cria um objeto chamado `a` que contém o valor 1. Bases de dados em R geralmente são armazenadas em objetos do tipo *data frame*, que organizam os dados em formato de tabela (linhas e colunas). Quando executamos uma função, ela realiza o conjunto de instruções programadas e retorna um resultado. As informações fornecidas para uma função são chamadas de argumentos e devem ser colocadas entre parênteses, logo após o nome da função. Caso haja mais de um argumento, eles são separados por vírgulas.\n\n**Classes:** Para trabalhar com textos, colocamos os caracteres entre aspas (” “). Isso é importante porque o R precisa distinguir entre nomes usados no código (como funções, objetos ou pacotes) e textos (letras e palavras).\n\n**Vetores:** São estruturas que armazenam uma sequência ordenada de elementos. Para criar um vetor, utilizamos a função `c()` e inserimos os valores desejados separados por vírgulas.\n\nExemplo: `vetor1 <- c(1, 2, 3, 20, 50)` cria um vetor com cinco números.\n\nUma forma prática de gerar vetores com valores em sequência é usando o operador `:`. Por exemplo, `1:5` cria um vetor com os números de 1 a 5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvetor1 <- c(1, 2, 3, 20, 50)\n\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n**Valores especiais – NA:** É utilizado para indicar que determinada informação está ausente. Isso significa que a variável existe, mas seu conteúdo é desconhecido.\n\nEm termos estatísticos, o `NA` representa um dado faltante ou omitido. Uma situação comum em análises, quando nem todos os dados estão disponíveis ou foram registrados.\n\n**Operador pipe:** (`%>%` ou `|>`) tem como objetivo facilitar a leitura e a construção de sequências de comandos no R. Ele funciona passando o resultado de uma expressão para a próxima função, como se fosse o primeiro argumento dessa nova função.\n\n## Comentários\n\nO R ignorará qualquer texto depois `#`dessa linha. Isso permite que você escreva comentários, textos que são ignorados pelo R, mas lidos por outras pessoas. Os comentários podem ser úteis para descrever brevemente o que o código a seguir faz.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}