---
title: "Introdução"
format: html
editor: visual
---

# Introdução ao R – Fundamentos da Análise de Dados

### Panorama geral do R e do RStudio®

O **R** é uma linguagem de programação amplamente reconhecida por sua robustez em aplicações estatísticas, análise exploratória de dados e visualização gráfica. Desenvolvido sob licença de código aberto, o R dispõe de uma comunidade ativa e de um repositório vasto de pacotes especializados, o que o torna uma ferramenta central nas rotinas de pesquisa científica, bioestatística, epidemiologia, ciência de dados e áreas afins. Sua arquitetura orientada a objetos e a vetores permite manipulação eficiente de grandes conjuntos de dados e execução de análises complexas com relativa simplicidade.

Para otimizar o uso do R, foi desenvolvido o **RStudio**, um ambiente de desenvolvimento integrado (IDE) que provê uma interface gráfica amigável e funcional, reunindo em uma mesma janela múltiplos painéis destinados à escrita e execução de scripts, à visualização de gráficos, à inspeção de objetos e ao gerenciamento de arquivos e pacotes. A interface promove uma organização intuitiva do fluxo de trabalho analítico e favorece a reproducibilidade das análises. O RStudio também conta com atualizações frequentes, notificando o usuário automaticamente quando uma nova versão está disponível.

Dentre os principais recursos oferecidos pelo RStudio, destacam-se:

-    Estruturação e depuração de códigos de forma organizada;

-    Geração de gráficos estáticos e interativos com recursos avançados de visualização;

-    Elaboração de documentos reprodutíveis por meio da linguagem **R Markdown**;

-    Desenvolvimento de interfaces gráficas interativas com **Shiny**;

-    Gerenciamento eficiente de pacotes, projetos e diretórios de trabalho.

O ingresso no ambiente R exige familiaridade com seus conceitos básicos e uma compreensão gradativa de sua lógica funcional. Nesse processo, a escolha de materiais didáticos de qualidade é essencial. Uma referência introdutória recomendada é o livro *Introdução à Ciência de Dados com R*, que apresenta, de forma sistemática, os principais fundamentos e práticas aplicadas à análise de dados por meio da linguagem R.

A seguir, são apresentados os primeiros conceitos fundamentais para a construção de scripts no R, como a criação de objetos, utilização de funções, e estruturação de elementos como vetores e classes de dados.

### Instalação do R e do RStudio

Para utilizar o ambiente RStudio de forma plena, é necessário realizar a instalação prévia do interpretador R e, em seguida, da IDE RStudio:

-    R (CRAN)

-    RStudio Desktop

### Objetos e funções

No R, o conceito de **objeto** é central. Objetos são estruturas que armazenam dados, podendo ser desde valores simples até estruturas mais complexas, como vetores, listas ou *data frames*. A criação de um objeto é realizada por meio do operador de atribuição `<-`, como ilustrado no exemplo abaixo:

```{r}
a <- 1

```

Nesse caso, o valor numérico `1` é atribuído ao objeto denominado `a`. Estruturas tabulares, como bases de dados, são geralmente armazenadas em objetos do tipo `data frame`, que organizam os dados em formato de colunas (variáveis) e linhas (observações).

Além dos objetos, **funções** são elementos essenciais na linguagem R. Funções representam conjuntos de instruções que executam tarefas específicas. Ao serem chamadas, recebem **argumentos**, que devem ser passados entre parênteses após o nome da função. Quando há múltiplos argumentos, estes devem ser separados por vírgulas.

### Classes de dados

O R reconhece diferentes **classes de objetos**, como numérico, lógico, fator e caractere. Ao trabalhar com **textos**, é necessário que os caracteres estejam entre aspas (simples ou duplas), de modo que o interpretador identifique aquele elemento como uma string literal, e não como uma referência a uma variável ou função previamente definida.

### Vetores

**Vetores** são estruturas fundamentais em R, utilizadas para armazenar coleções de elementos homogêneos, isto é, do mesmo tipo (numéricos, lógicos ou caracteres). A função `c()` (de *combine*) é a forma padrão de criação de vetores:

```{r}
vetor1 <- c(1, 2, 3, 20, 50)

1:5
```

### Valores ausentes em R: uso do `NA`

Em ambientes de análise de dados, é comum que conjuntos de informações contenham lacunas — valores que, por diferentes razões, não foram observados, registrados ou informados. No R, tais situações são representadas por um valor especial denominado `NA` (*Not Available*), o qual indica explicitamente a ausência de informação em uma determinada célula ou posição de um vetor, coluna ou estrutura de dados.

A presença de `NA` não invalida a existência da variável, mas sinaliza que, naquele ponto específico, o conteúdo é desconhecido ou não mensurado. Em análises estatísticas, o correto tratamento de dados faltantes é crucial, uma vez que funções de cálculo ou modelagem podem ser sensíveis à presença desses elementos, resultando em erros ou estimativas distorcidas se não forem devidamente tratados com argumentos como `na.rm = TRUE` ou métodos de imputação.

### Encadeamento de comandos: o operador pipe

Para melhorar a legibilidade e a fluidez da escrita de códigos no R, foram desenvolvidos operadores que permitem **encadear múltiplas funções** de maneira mais linear e intuitiva. Esses operadores são conhecidos como **pipes**, e os mais utilizados são `%>%` (do pacote `magrittr`) e `|>` (nativo a partir da versão 4.1 do R).

O funcionamento dos pipes consiste em **transmitir o resultado de uma operação como argumento principal da função seguinte**, permitindo que o raciocínio de transformação de dados seja lido da esquerda para a direita, o que aproxima a estrutura do código da lógica do pensamento humano.

### Comentários no código

A escrita de **comentários** é uma prática essencial na programação científica. No R, qualquer trecho precedido pelo símbolo `#` é ignorado na execução do código, funcionando como uma anotação que serve para documentar o que determinada linha ou bloco está realizando.

Comentários bem elaborados facilitam a manutenção, interpretação e reaproveitamento de scripts, especialmente em contextos colaborativos ou em projetos de longo prazo. Além disso, tornam o código mais acessível para quem está iniciando na linguagem ou revisitando uma análise antiga.
